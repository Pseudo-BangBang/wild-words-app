# Production docker-compose configuration
version: "3.8"

services:
  # Production MySQL with better configuration
  mysql:
    image: mysql:8.0
    container_name: wildwords-mysql-prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-wildwords_app}
      MYSQL_USER: ${MYSQL_USER:-wildwords_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-wildwords_password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
      - ./docker/mysql/conf:/etc/mysql/conf.d
    networks:
      - wildwords-network
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${MYSQL_ROOT_PASSWORD:-rootpassword}",
        ]
      timeout: 20s
      retries: 10
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --max-connections=200
      --slow-query-log=1
      --slow-query-log-file=/var/lib/mysql/slow.log
      --long-query-time=2

  # Production Backend
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: wildwords-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4000
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: ${MYSQL_USER:-wildwords_user}
      DB_PASSWORD: ${MYSQL_PASSWORD:-wildwords_password}
      DB_NAME: ${MYSQL_DATABASE:-wildwords_app}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-here}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
    ports:
      - "4000:4000"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - wildwords-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Production Frontend
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: wildwords-frontend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_API_URL: http://backend:4000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - wildwords-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: wildwords-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - wildwords-network

volumes:
  mysql_prod_data:
    driver: local

networks:
  wildwords-network:
    driver: bridge
